<?php


/**
 * Skeleton subclass for performing query and update operations on the 'product' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Nov 17 15:44:40 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ProductPeer extends BaseProductPeer {

    public static function retrieveBySlug($slug) {
        $c = new Criteria();
        $c->add(self::SLUG, $slug);
        return self::doSelectOne($c);
    }

    public static function tryAdd($catId, $amount, $uid, $analog_uid, $slug, $name, $distrib_price) {
        $p = self::retrieveBySlug($slug);
        if (!$p) {
            $p = new Product();
            $p->setCategoryId($catId);
            $p->setAmount($amount);
            $p->setUid($uid);
            $p->setAnalogUid($analog_uid);
            $p->setName($name);
            $p->setSlug($slug);
            $p->setDistribPrice($distrib_price);
            $p->save();
        }
        return $p;
    }

    public static function getProductsByCarLabelCriteria($carLableId) {
        $c = new Criteria();
        $c->addJoin(self::ID, CarProductPeer::PRODUCT_ID, Criteria::LEFT_JOIN);
        $c->add(CarProductPeer::CAR_ID, $carLableId);
        return $c;
    }

    public static function getProductsByCarLabelCategoryCriteria($carLableId, $topCategoryId, $categoryId) {
        $c = new Criteria();
        $c->addJoin(self::ID, CarProductPeer::PRODUCT_ID, Criteria::LEFT_JOIN);
        $c->add(CarProductPeer::CAR_ID, $carLableId);
        if (!is_null($categoryId)) {
            $c->add(self::CATEGORY_ID, $categoryId);
        } else {
            $c->addJoin(self::CATEGORY_ID, CategoryPeer::ID, Criteria::LEFT_JOIN);
            $c->add(CategoryPeer::PARENT_ID, $topCategoryId);
        }
        return $c;
    }

    public static function getProductsBySearchCriteria($carLableId, $uid, $name) {
        $c = new Criteria();
        $c->addJoin(self::ID, CarProductPeer::PRODUCT_ID, Criteria::LEFT_JOIN);
        $c->add(CarProductPeer::CAR_ID, $carLableId);
        if (!empty($uid)) {
            $c->add(self::UID, $uid.'%', Criteria::LIKE);
        }
        if (!empty($name)) {
            $c->add(self::NAME, $name.'%', Criteria::LIKE);
        }
        return $c;
    }

    public static function getUsability($productId, $delimiter) {
        $con = Propel::getConnection();
        $stmt = $con->prepare("
            SELECT
                GROUP_CONCAT(DISTINCT ".CarLabelPeer::NAME." ORDER BY ".CarLabelPeer::NAME." SEPARATOR ".$con->quote($delimiter).") as list
            FROM
                ".CarProductPeer::TABLE_NAME." LEFT JOIN
                ".CarLabelPeer::TABLE_NAME." ON ".CarProductPeer::CAR_ID." = ".CarLabelPeer::ID."
            WHERE
                ".CarProductPeer::PRODUCT_ID." = :product_id
        ;");
        $stmt->execute(array(
            ':product_id' => $productId
        ));
        $result = false;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $result = $row[0];
        }
        return $result;
    }

} // ProductPeer
