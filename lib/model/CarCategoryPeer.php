<?php


/**
 * Skeleton subclass for performing query and update operations on the 'car_category' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 11/03/13 13:19:03
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class CarCategoryPeer extends BaseCarCategoryPeer {

	public static function tryAdd($carId, $categoryId) {
		$cc = CarCategoryPeer::retrieveByPK($carId, $categoryId);
        if (!$cc) {
		    $cc = new CarCategory();
            $cc->setCarId($carId)
                ->setCategoryId($categoryId)
                ->save();
        }
        return $cc;
	}

    public static function import($tmp_file, $encoding) {
        $fh = fopen($tmp_file, 'r');
        $con = Propel::getConnection();
        $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, 1);
        $con->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);

        $report = array(
            'errorLines' => array(),
            'worked' => 0,
            'success' => true
        );
        $fields = array(
            'file',
            'uid',
            'name',
            'type',
            'dealer',
            'amount',
            'supplier',
            'price_group',
            'distribution_price',
            'manufacturer',
            'cat1',
            'cat2'
        );
        $labelTransition = array(
            'шевроле' => CarLabelPeer::retrieveIdBySlug('chevrolet'),
            'хаммер' => CarLabelPeer::retrieveIdBySlug('hummer'),
            'опель' => CarLabelPeer::retrieveIdBySlug('opel'),
            'кадиллак' => CarLabelPeer::retrieveIdBySlug('cadillac')
        );
//        header('content-type: text/plain;charset=utf-8');

        $createTable = "CREATE TEMPORARY TABLE i_o(
            `uid` varchar(100) NOT NULL,
            `name` varchar(250) NOT NULL,
            `amount` int(11) DEFAULT NULL,
            `distribution_price` decimal(15,2) DEFAULT NULL,
            `car_id` int(11) DEFAULT NULL,
            `cat1` varchar(250) NOT NULL,
            `cat2` varchar(250) NOT NULL,

            `product_id` int(11) DEFAULT NULL,
            `name_slug` varchar(250) NOT NULL,
            `cat1_id` int(11) DEFAULT NULL,
            `cat1_slug` varchar(250) NOT NULL,
            `cat2_id` int(11) DEFAULT NULL,
            `cat2_slug` varchar(250) NOT NULL
            ) ENGINE=MyISAM DEFAULT CHARSET=utf8;";
        $con->query($createTable);

        $insertRowSql = "INSERT INTO i_o(
            `uid`,
            `name`,
            `amount`,
            `distribution_price`,
            `car_id`,
            `cat1`,
            `cat2`,

            `name_slug`,
            `cat1_slug`,
            `cat2_slug`
        ) VALUES";


        $limitItems = 30;
        $list = array();

        $i = 0;
        $time = time();
        $row = fgetcsv($fh); // ommited, as headings
        while (!feof($fh) && $row = fgetcsv($fh)) {
            $i++;
            if (!$row) {
                $report['success'] = false;
                $report['errorLines'][] = $i;
                continue;
            }

            $gather = array_combine($fields, $row);

            if ($encoding != 'UTF-8') {
                foreach ($gather as $key => $field) {
                    if ($key == 0) continue;
                    $gather[$key] = iconv($encoding, 'UTF-8//IGNORE', $gather[$key]);
                }
            }

            $labels = explode(' ', $gather['manufacturer']);
            foreach ($labels as $label) {
                if (isset($labelTransition[$label])) {
                    $success = true;
                    $list[] = "(
                        ".$con->quote($gather['uid']).",
                        ".$con->quote($gather['name']).",
                        ".$con->quote((int)$gather['amount']).",
                        ".$con->quote(Common::getFromPriceFormat($gather['distribution_price'])).",
                        ".$con->quote($labelTransition[$label]).",
                        ".$con->quote($gather['cat1']).",
                        ".$con->quote($gather['cat2']).",

                        ".$con->quote(Common::slugify($gather['uid'].'-'.$gather['name'])).",
                        ".$con->quote(Common::slugify($gather['cat1'])).",
                        ".$con->quote(Common::slugify($gather['cat1'].'-'.$gather['cat2']))."
                    )";
                    $report['worked'] += (int)$success;
                } else {
                    $report['success'] = false;
                    $report['errorLines'][] = $i;
                }
            }
            unset($gather);

            if (count($list) > $limitItems) {
                $con->query($insertRowSql.implode(',',$list));
                unset($list);
                $list = array();
            }

//            if ($i%1000 == 0) {
//                echo $i." Mem: ".memory_get_usage().', Peak:'.memory_get_peak_usage()."\r\n";
//                ob_flush();
//            }
        }

        if (count($list)) {
            $con->query($insertRowSql.implode(',',$list));
            unset($list);
        }

//        echo "Mem: ".memory_get_usage().', Peak:'.memory_get_peak_usage()."\r\n";
//        $time = time()-$time;
//        echo "Time total: ".$time.', Avg.each:'.((float)$time/($i ? $i : 1))."\r\n";
//        $time = time();

        // add all categories
        $stmt = $con->prepare("INSERT IGNORE INTO ".CategoryPeer::TABLE_NAME."(".CategoryPeer::NAME.", ".CategoryPeer::SLUG.", ".CategoryPeer::PARENT_ID.")
            SELECT
                `cat1`,
                `cat1_slug`,
                NULL
            FROM
                `i_o`
            GROUP BY
                `cat1`;");
        $stmt->execute();
        unset($stmt);
        // cache ids
        $stmt = $con->prepare("UPDATE `i_o` SET
            `cat1_id` = (SELECT ".CategoryPeer::ID." FROM ".CategoryPeer::TABLE_NAME." WHERE ".CategoryPeer::SLUG." = i_o.`cat1_slug` LIMIT 1)
        ;");
        $stmt->execute();
        unset($stmt);

        // add all sub-categories
        $stmt = $con->prepare("INSERT IGNORE INTO ".CategoryPeer::TABLE_NAME."(".CategoryPeer::NAME.", ".CategoryPeer::SLUG.", ".CategoryPeer::PARENT_ID.")
            SELECT
                `cat2`,
                `cat2_slug`,
                `cat1_id`
            FROM
                `i_o`
            GROUP BY
                `cat2_slug`;");
        $stmt->execute();
        unset($stmt);
        // cache ids
        $stmt = $con->prepare("UPDATE `i_o` SET
            `cat2_id` = (SELECT ".CategoryPeer::ID." FROM ".CategoryPeer::TABLE_NAME." WHERE ".CategoryPeer::SLUG." = i_o.`cat2_slug` LIMIT 1)
        ;");
        $stmt->execute();
        unset($stmt);

        // add all products
        $stmt = $con->prepare("INSERT INTO ".ProductPeer::TABLE_NAME."(
                ".ProductPeer::CATEGORY_ID.",
                ".ProductPeer::UID.",
                ".ProductPeer::ANALOG_UID.",
                ".ProductPeer::AMOUNT.",
                ".ProductPeer::SLUG.",
                ".ProductPeer::NAME.",
                ".ProductPeer::DISTRIB_PRICE."
            )
            SELECT
                `cat2_id`,
                `uid`,
                NULL,
                `amount`,
                `name_slug`,
                `name`,
                `distribution_price`
            FROM
                `i_o`
            ON DUPLICATE KEY UPDATE
                ".ProductPeer::CATEGORY_ID." = i_o.`cat2_id`,
                ".ProductPeer::AMOUNT." = i_o.`amount`,
                ".ProductPeer::DISTRIB_PRICE." = i_o.`distribution_price`
            ;");
        $stmt->execute();
        unset($stmt);
        // cache ids
        $stmt = $con->prepare("UPDATE `i_o` SET
            `product_id` = (SELECT ".ProductPeer::ID." FROM ".ProductPeer::TABLE_NAME." WHERE ".ProductPeer::SLUG." = i_o.`name_slug` LIMIT 1)
        ;");
        $stmt->execute();
        unset($stmt);

        // store pairs: car/Product
        $stmt = $con->prepare("INSERT IGNORE INTO ".CarProductPeer::TABLE_NAME."(".CarProductPeer::CAR_ID.", ".CarProductPeer::PRODUCT_ID.")
            SELECT
                `car_id`,
                `product_id`
            FROM
                `i_o`
            GROUP BY
                `car_id`, `product_id`;");
        $stmt->execute();
        unset($stmt);

        // store pairs: car/Category
        $stmt = $con->prepare("INSERT IGNORE INTO ".CarCategoryPeer::TABLE_NAME."(".CarCategoryPeer::CAR_ID.", ".CarCategoryPeer::CATEGORY_ID.")
            SELECT
                `car_id`,
                `cat2_id`
            FROM
                `i_o`
            GROUP BY
                `car_id`, `cat2_id`;");
        $stmt->execute();
        unset($stmt);

//        echo "Mem: ".memory_get_usage().', Peak:'.memory_get_peak_usage()."\r\n";
//        $time = time()-$time;
//        echo "Time total: ".$time.', Avg.each:'.((float)$time/($i ? $i : 1))."\r\n";
//        die();
        return $report;
    }
} // CarCategoryPeer
